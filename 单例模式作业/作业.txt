单例常见写法
1.饿汉式单例
饿汉式单例是在类加载时就立即初始化，并且创建单例对象。绝对线程安全，在线程还没有出现以前就实例化了，不可能存在访问安全问题。
优点：没有加任何锁、执行效率比较高，在用户体验上比懒汉式更好。
缺点：类加载的时候就初始化，占用空间，浪费内存。

public class HungrySingleton {
//先静态、后动态
//先属性、后方法
//先上后下
private static final HungrySingleton hungrySingleton = new HungrySingleton();
private HungrySingleton(){}
public static HungrySingleton getInstance(){
return hungrySingleton;
}
}


2.懒汉式单例
优点：在用到的时候加载，不占用内存空间
缺点：存在线程安全问题
使用静态内部类实现线程安全的懒汉式加载，但会出现反射破坏单例问题，序列化破坏单例（只需要增加readResolve()方法）
内部类的执行逻辑：默认不加载，在外部类调用时，一定会先加载内部类。
外部类加载->调用外部类方法->加载内部类->返回结果


3.注册式单例
注册式单例又称为登记式单例，就是将每一个实例都登记到某一个地方，使用唯一的标
识获取实例。注册式单例有两种写法：一种为容器缓存，一种为枚举登记。
有效防止单例被反射和序列化破坏



4.ThreadLocal单例
ThreadLocal 不能保证其
创建的对象是全局唯一，但是能保证在单个线程中是唯一的，天生的线程安全



